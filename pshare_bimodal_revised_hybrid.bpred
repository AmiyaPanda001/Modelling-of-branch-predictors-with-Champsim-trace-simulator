#include "ooo_cpu.h"

//Bimodal parameters
#define BIMODAL_TABLE_SIZE 16384
#define BIMODAL_PRIME 16381
#define MAX_COUNTER 3
int bimodal_table[NUM_CPUS][BIMODAL_TABLE_SIZE];

//Meta predictor parameters
int meta_bimodal_table[NUM_CPUS][BIMODAL_TABLE_SIZE];
int picked_predictor; // 1 - gshare, 0 - bimodal
int current_prediction, current_prediction_alt; // 1-taken, 0-not taken

//Pshare predictor parameters
#define PATTERN_HISTORY_LENGTH 14
#define PATTERN_HISTORY_MASK (1 << PATTERN_HISTORY_LENGTH) - 1

#define PATTERN_HISTORY_TABLE_LENGTH 16384 
#define PATTERN_HISTORY_TABLE_PRIME 16381
int branch_history_table[NUM_CPUS][PATTERN_HISTORY_TABLE_LENGTH - 1];

#define PS_HISTORY_TABLE_SIZE 16384
int PS_history_table[NUM_CPUS][PS_HISTORY_TABLE_SIZE];
int my_last_prediction[NUM_CPUS];

//Bimodal functions-----------------------------------------------------------------------------------------------------

void bimodal_initialize_branch_predictor(uint32_t cpu)
{
    cout << "CPU " << cpu << " Bimodal branch predictor" << endl;

    for(int i = 0; i < BIMODAL_TABLE_SIZE; i++)
        bimodal_table[cpu][i] = 0;
}

uint8_t bimodal_predict_branch(uint64_t ip, uint32_t cpu)
{
    uint32_t hash = ip % BIMODAL_PRIME;
    uint8_t prediction = (bimodal_table[cpu][hash] >= ((MAX_COUNTER + 1)/2)) ? 1 : 0;

    return prediction;
}

void bimodal_last_branch_result(uint64_t ip, uint8_t taken, uint32_t cpu)
{
    uint32_t hash = ip % BIMODAL_PRIME;

    if (taken && (bimodal_table[cpu][hash] < MAX_COUNTER))
        bimodal_table[cpu][hash]++;
    else if ((taken == 0) && (bimodal_table[cpu][hash] > 0))
        bimodal_table[cpu][hash]--;
}

//Pshare functions----------------------------------------------------------------------------------------------------------

void pshare_initialize_branch_predictor(uint32_t cpu)
{
    cout << "CPU " << cpu << " PSHARE branch predictor" << endl;

    my_last_prediction[cpu] = 0;
	
	for(int i=0; i<PATTERN_HISTORY_TABLE_LENGTH; i++)
        branch_history_table[cpu][i] = 0; // history initiated as not taken

    for(int i=0; i<PS_HISTORY_TABLE_SIZE; i++)
        PS_history_table[cpu][i] = 2; // 2 is slightly taken
}

unsigned int PS_table_hash(uint64_t ip, int bh_vector)
{
    unsigned int hash = ip^(ip>>PATTERN_HISTORY_LENGTH)^(ip>>(PATTERN_HISTORY_LENGTH*2))^bh_vector;
    hash = hash%PS_HISTORY_TABLE_SIZE;

    //printf("%d\n", hash);

    return hash;
}

uint8_t pshare_predict_branch(uint64_t ip, uint32_t cpu)
{
    int prediction = 1;
	
	int pattern_history_table_index_hash = ip % PATTERN_HISTORY_TABLE_PRIME;
	
	int current_pattern  = branch_history_table[cpu][pattern_history_table_index_hash];
	
    int PS_hash = PS_table_hash(ip, current_pattern);

    if(PS_history_table[cpu][PS_hash] >= 2)
        prediction = 1;
    else
        prediction = 0;

    my_last_prediction[cpu] = prediction;

    return prediction;
}

void pshare_last_branch_result(uint64_t ip, uint8_t taken, uint32_t cpu)
{	
	int pattern_history_table_index_hash = ip % PATTERN_HISTORY_TABLE_PRIME;
	int current_pattern  = branch_history_table[cpu][pattern_history_table_index_hash];
    int PS_hash = PS_table_hash(ip, current_pattern);

    if(taken == 1) {
        if(PS_history_table[cpu][PS_hash] < 3)
            PS_history_table[cpu][PS_hash]++;
    } else {
        if(PS_history_table[cpu][PS_hash] > 0)
            PS_history_table[cpu][PS_hash]--;
    }

    // update branch history vector
    branch_history_table[cpu][pattern_history_table_index_hash] <<= 1;
    branch_history_table[cpu][pattern_history_table_index_hash] &= PATTERN_HISTORY_MASK;
    branch_history_table[cpu][pattern_history_table_index_hash] |= taken;
}



//Meta predictor functions--------------------------------------------------------------------------------------------------------------

void O3_CPU::initialize_branch_predictor()
{
    cout << "CPU " << cpu << " Bimodal Gshare Hybrid branch predictor" << endl;
	
	bimodal_initialize_branch_predictor(0);
    pshare_initialize_branch_predictor(0);
	
	current_prediction_alt = 0;
	current_prediction = 0;
	picked_predictor = 0;
	for(int i = 0; i < BIMODAL_TABLE_SIZE; i++)//meta predictor
        meta_bimodal_table[cpu][i] = 0;
}

uint8_t O3_CPU::predict_branch(uint64_t ip)
{
	uint8_t prediction_bimodal, prediction_pshare;
	
	prediction_bimodal = bimodal_predict_branch(ip, 0);
	prediction_pshare = pshare_predict_branch(ip, 0);
	
    uint32_t hash = ip % BIMODAL_PRIME;
    uint8_t prediction = (meta_bimodal_table[cpu][hash] >= ((MAX_COUNTER + 1)/2)) ? prediction_pshare : prediction_bimodal;
	
	picked_predictor = (meta_bimodal_table[cpu][hash] >= ((MAX_COUNTER + 1)/2)) ? 1 : 0;//1-gshare, 0-bimodal)
	current_prediction = prediction;
	current_prediction_alt = ((picked_predictor == 0 )? prediction_pshare : prediction_bimodal);
	
    return prediction;
}

void O3_CPU::last_branch_result(uint64_t ip, uint8_t taken)
{
	bimodal_last_branch_result(ip, taken, 0);
	pshare_last_branch_result(ip, taken, 0);
	
    uint32_t hash = ip % BIMODAL_PRIME;

    if ( ((picked_predictor == 1 && current_prediction == taken && current_prediction_alt != taken) || (picked_predictor == 0 && current_prediction != taken && current_prediction_alt == taken) )&& (meta_bimodal_table[cpu][hash] < MAX_COUNTER))
        meta_bimodal_table[cpu][hash]++;
    else if (((picked_predictor == 0 && current_prediction == taken && current_prediction_alt != taken) || (picked_predictor == 1 && current_prediction != taken && current_prediction_alt == taken) ) && (meta_bimodal_table[cpu][hash] > 0))
        meta_bimodal_table[cpu][hash]--;
}
